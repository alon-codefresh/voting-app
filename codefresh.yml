version: '1.0'

steps:

#build all the images
  build_image_vote:
    title: Building Voting Image
    type: build
    #Important: rename this image to to a valid repository in your registry. For example: myUserName/vote
    image_name: aloncodefresh/vote
    #The directory should be relative to git repository that is used for cloning
    working_directory: ./vote/
    #Dockerfile location should be relative to the working directory
    dockerfile: Dockerfile

  build_image_result:
    title: Building Result Image
    type: build
    image_name: aloncodefresh/result
    working_directory: ./result/
    dockerfile: Dockerfile

  build_image_worker:
    title: Building Worker Image
    type: build
    image_name: aloncodefresh/worker
    working_directory: ./worker/
    dockerfile: Dockerfile


#Push all the images
  push_to_registry_vote:
    title: Pushing to Vote Docker Registry
    type: push

    #A candidate is the image that we want to push to registry
    candidate: '${{build_image_vote}}'

    # You can push the image with whatever tag you want. In our example we use CF_BRANCH, which is a variable in
    # the build process, accessible throughout the entire flow.
    tag: '${{CF_BRANCH}}'


  push_to_registry_result:
    title: Pushing to Result Docker Registry
    type: push
    candidate: '${{build_image_result}}'
    tag: '${{CF_BRANCH}}'


  push_to_registry_worker:
    title: Pushing to Worker Docker Registry
    type: push
    candidate: '${{build_image_worker}}'
    tag: '${{CF_BRANCH}}'


  unit_test:
    type: composition
    working_directory: ${{main_clone}}
    composition:
      version: '2'
      services:
        vote:
          command: python app.py
          volumes:
            - './vote:/app'
          ports:
            - '5000:80'
          networks:
            - front-tier
            - back-tier
          image: 'aloncodefresh/votingapp_vote:CF-3764'
        result:
          command: nodemon --debug server.js $CF_VOLUME_PATH
          volumes:
            - './result:/app'
          ports:
            - '5001:80'
            - '5858:5858'
          networks:
            - front-tier
            - back-tier
          image: 'aloncodefresh/votingapp_result:CF-3764'
        worker:
          networks:
            - back-tier
          image: 'aloncodefresh/votingapp_worker:CF-3764'
        redis:
          image: 'redis:alpine'
          container_name: redis
          ports:
            - '6379'
          networks:
            - back-tier
        db:
          image: 'postgres:9.4'
          container_name: db
          volumes:
            - 'db-data:/var/lib/postgresql/data'
            - '${{CF_VOLUME_NAME}}:/codefresh/'
          networks:
            - back-tier
      volumes:
        db-data: null
      networks:
        front-tier: null
        back-tier: null
    composition_candidates:
        test:
          image: redis
          command: bash -c 'sleep 30 && echo $CF_VOLUME_PATH'
